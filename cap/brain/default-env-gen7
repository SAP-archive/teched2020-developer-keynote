#!/usr/bin/env bash

# Generate a default-env.json file - default-env-gen

# Expects a single mandatory argument - a temporary app name
# Produces a default-env.json file containing the VCAP_SERVICES
# JSON data.

# As a minimum, it will bind the enterprise messaging service
# instance. It will also check for a destination service
# instance and an xsuaa service instance, with specific names,
# and bind those if it finds them.

readonly instance_enterprise_messaging=emdev
readonly targetfilename=default-env.json
readonly sedcommandfile=default-env-gen.sed

# shellcheck disable=SC2034
readonly instance_destination=destination-lite
# shellcheck disable=SC2034
readonly instance_xsuaa=xsuaa-application

main() {
  local appname=$1
  local instance=${2:-$instance_enterprise_messaging}

  # Remove any existing app
  cf d -f "$appname" 2>/dev/null

  # Deploy empty app
  cf push "$appname" -k 64M -m 32M --no-route --no-start

  # Bind the messaging service instance to the app
  cf bind-service "$appname" "$instance"

  # If present, also bind the destination and xsuaa service instances
  for i in destination xsuaa; do
    local name="instance_$i"
    cf service "${!name}" > /dev/null 2>&1 \
      && cf bind-service "$appname" "${!name}"
  done

  local guid=$(cf app "$appname" --guid)
  echo $guid

  # Request environment info
  JQ=jq
  curl https://stedolan.github.io/jq/download/linux64/jq > $JQ && chmod +x $JQ
  ls -la $JQ
 
  cf curl "/v3/apps/$guid/env" | ./jq -r '.system_env_json' > "$targetfilename"
  #cf env "$appname" | sed -n -f "$sedcommandfile" > "$targetfilename"

}

if [[ $# -eq 0 ]]; then
  echo Usage: "$(basename "$0") <temporary-app-name>"
  exit 1
fi

main "$@"
